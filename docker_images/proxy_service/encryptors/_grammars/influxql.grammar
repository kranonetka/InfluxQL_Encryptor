query                        = statement
statement                    = create_user_stmt / drop_database_stmt / select_stmt / create_database_stmt / show_databases_stmt / show_retention_policies_stmt / show_field_keys_stmt / show_measurements_stmt
show_retention_policies_stmt = 'SHOW RETENTION POLICIES' ws+ on_clause
on_clause                    = 'on' ws+ db_name
show_measurements_stmt       = 'SHOW MEASUREMENTS' ws+ limit_clause
limit_clause                 = 'LIMIT' ws+ integer
show_field_keys_stmt         = 'SHOW FIELD KEYS' ws+ from_clause
create_user_stmt             = 'CREATE USER' ws+ user_name ws+ 'WITH PASSWORD' ws+ password (ws+ 'WITH ALL PRIVILEGES')?
create_database_stmt         = 'CREATE DATABASE' ws+ db_name
drop_database_stmt           = 'DROP DATABASE' ws+ db_name
show_databases_stmt          = 'SHOW DATABASES'
select_stmt                  = 'SELECT' ws+ field ws+ from_clause ws_where? (ws+ group_by_clause)?
fields                       = (field (comma field)*) / '*'
field                        = expr gap
binary_op                    = logical_op / arithmetical_op / comp_op
arithmetical_op              = '+' / '-' / '*' / '/' / '%' / '&' / '|' / '^'
comp_op                      = '=' / '!=' / '<>' / '<='/ '<' / '>=' / '>'
logical_op                   = 'AND' / 'OR' / 'and' / 'or'
expr                         = unary_expr (ws* binary_op ws* unary_expr)*
unary_expr                   = (lpar expr rpar) / duration_lit / special / aggregation / var_ref / string_lit / float_lit / time_lit / int_lit / bool_lit
aggregation                  = aggregation_func lpar expr rpar
aggregation_func             = (unquoted_identifier gap)
special                      = (time_word lpar duration_lit rpar) / 'now()'
from_clause                  = 'FROM' ws+ measurement_name
measurement                  = (policy_name dot measurement_name) / measurement_name
measurements                 = measurement (comma measurement)*
measurement_name             = identifier gap
policy_name                  = identifier gap
ws_where                     = ws+ where_clause
where_clause                 = 'WHERE' ws+ lpar quoted_identifier ws* comp_op ws* string_lit rpar (ws* logical_op ws* where_time)?
where_time                   = time_condition (ws* logical_op ws* time_condition)?
time_condition               = time_word ws* comp_op ws* (duration_lit / (special ws* arithmetical_op ws* duration_lit))
group_by_clause              = 'GROUP BY' ws+ dimension (ws+ 'fill' lpar fill_option rpar)?
dimension                    = duration / var_ref
duration                     = time_word lpar time_interval (comma offset_interval)? rpar
time_interval                = duration_lit gap
offset_interval              = duration_lit gap
dimensions                   = dimension (comma dimension)*
fill_option                  = 'null' / 'none' / 'previous' / 'linear' / int_lit / float_lit
user_name                    = identifier gap
password                     = string_lit gap
db_name                      = identifier gap
identifier                   = unquoted_identifier / quoted_identifier
string_lit                   = single_quote ~r"[^'\n]"* single_quote
int_lit                      = sign? integer
float_lit                    = sign? (integer (dot digit* (exp sign integer)?)?)
exp                          = ~r'e'i
bool_lit                     = 'TRUE' / 'FALSE'
var_ref                      = measurement
duration_lit                 = int_lit ws? duration_unit
duration_unit                = 'u' / 'Âµ' / 'ms' / 's' / 'm' / 'h' / 'd' / 'w'
time_lit                     = ("'" iso8601 "'") / int_lit
iso8601                      = ~r"(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?"
unquoted_identifier          = letter (letter / digit)*
quoted_identifier            = double_quote ~r'[^"\n]'+ double_quote
letter                       = ascii_letter / '_'
digit                        = ~r'[0-9]'
ascii_letter                 = ~r'[a-z]'i
integer                      = (~r'[1-9]' digit+) / digit
sign                         = ~r'[+-]'
ws                           = ~r'\s'
single_quote                 = "'"
double_quote                 = '"'
comma                        = ','
equal                        = '='
dot                          = '.'
lpar                         = '('
rpar                         = ')'
time_word                    = 'time'
gap                          = ''
